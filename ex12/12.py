"""
	The sequence of triangle numbers is generated by adding the natural
	numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
	28. The first ten terms would be:

	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

	Let us list the factors of the first seven triangle numbers:

 	1: 1
 	3: 1,3
 	6: 1,2,3,6
	10: 1,2,5,10
	15: 1,3,5,15
	21: 1,3,7,21
	28: 1,2,4,7,14,28
	
	We can see that 28 is the first triangle number to have over five divisors.

	What is the value of the first triangle number to have over five hundred
	divisor
"""

# https://en.wikipedia.org/wiki/Triangular_number

divisors_limit = 500


def calculate_triangle_number(n):
    """Calculate the n-th triangle number."""
    return n * (n + 1) // 2  # Using integer division for efficiency


def prime_factors(n):
    """
    Return the list of prime factors of n.
    Each prime factor is included as many times as it divides n.
    """
    factors = []

    # Handle even factors
    while n % 2 == 0:
        factors.append(2)
        n = n // 2

    # Handle odd factors
    i = 3
    while i * i <= n:
        while n % i == 0:
            factors.append(i)
            n = n // i
        i += 2  # Increment by 2 to check only odd numbers

    # If n is a prime number greater than 2
    if n > 2:
        factors.append(n)

    return factors


def count_divisors(factors):
    """
    Count the number of divisors based on the list of prime factors (prime factorization).
    Number of divisors = (e1 + 1) * (e2 + 1) * ... * (ek + 1)
    where e1, e2, ..., ek are the exponents of the prime factors.
    """
    if not factors:
        return 1  # 1 has exactly one divisor

    # Count the exponents of each unique prime factor
    unique_factors = {}
    for factor in factors:
        unique_factors[factor] = unique_factors.get(factor, 0) + 1

    # Calculate the number of divisors
    num_divisors = 1
    for exponent in unique_factors.values():
        num_divisors *= exponent + 1

    return num_divisors


def first_triangle_with_over_n_divisors(n_divisors):
    """
    Find the first triangle number with over n_divisors divisors.
    """
    i = 300  # 300 is an arbitrary starting point
    while True:
        triangle = calculate_triangle_number(i)
        factors = prime_factors(triangle)
        num_divisors = count_divisors(factors)
        if num_divisors > n_divisors:
            return triangle
        i += 1


result = first_triangle_with_over_n_divisors(divisors_limit)
print(
    f"The first triangle number with over {divisors_limit} divisors is: {result}"
)  # Output: 76576500
