"""
	Each new term in the Fibonacci sequence is generated by adding the
	previous two terms. By starting with 1 and 2, the first 10 terms will be:

	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

	By considering the terms in the Fibonacci sequence whose values do not
	exceed four million, find the sum of the even-valued terms.
"""

import numpy as np

# implement using the Binet-Formula
# constants for the formula
sqrt5 = np.sqrt(5)
alpha = (1 + sqrt5) / 2
beta = (1 - sqrt5) / 2

limitNumber = 4000000

# calculate n_max using the derived formula
# apply log of both sides and solve for n
n_max = int(np.ceil((np.log(limitNumber * sqrt5)) / np.log(alpha)))

# print(f"n_max: {n_max}") # 34

# generate the array to fit the fibonacci sequence
n_values = np.arange(1, n_max + 1)

# calculate the fibonacci sequence using the Binet-Formula
# use np.rint to round the values to the nearest integer
fib_numbers = np.rint((alpha**n_values - beta**n_values) / sqrt5).astype(int)

# print(f"Last Fibonacci number computed: {fib_numbers[-1]}")

# filter the even numbers and sum them up
fib_numbers = fib_numbers[fib_numbers < limitNumber]
even_fib_numbers = fib_numbers[fib_numbers % 2 == 0]

print(f"Sum of even Fibonacci numbers: {np.sum(even_fib_numbers)}")  # 4613732
